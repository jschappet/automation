package com.schappet.weight.controller;



import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.schappet.web.C3;
import com.schappet.web.WeightView;
import com.schappet.weight.domain.Activity;
import com.schappet.weight.domain.Person;
import com.schappet.weight.domain.Weight;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/04/2016 15:30:30 CDT
 */
@Controller( value = "com_schappet_weight_controller_weight_controller" )
@RequestMapping( "/weight" )
public class WeightController extends AbstractWeightController {

    private static final Log log = LogFactory.getLog( WeightController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "weightList", weightDaoService.getWeightService().list() );
        return "/weight/weight/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list() {
        return "/weight/weight/list";
    }

    
    private static final int DEFAULT_PERSON = 1;


    @RequestMapping(value = {"last/{number}/months"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<WeightView> latestMonths(@PathVariable("number") Integer count) {
    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	List<Weight> wList = weightDaoService.getWeightService().lastNMonths(defaultPerson, count);
    	List<WeightView> list = new ArrayList<WeightView>();
    	for (Weight w : wList) {
    		WeightView wv = new WeightView();
        	wv.setDate(w.getWeightInDate());
        	wv.setValue(w.getValue());
        	list.add(wv);
    	}
    	return list;
    	
    }

    
    
    @RequestMapping(value = {"latest/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<WeightView> latest() {
    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	Weight w = weightDaoService.getWeightService().latest(defaultPerson);
    	WeightView wv = new WeightView();
    	wv.setDate(w.getWeightInDate());
    	wv.setValue(w.getValue());
    	List<WeightView> list = new ArrayList<WeightView>();
    	list.add(wv);
    	return list;
    	
    }

    @RequestMapping(value = {"c3/last30/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public C3 last30C3()
    {
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	List<Weight> list = weightDaoService.getWeightService().lastNMonths(defaultPerson,7);
    	List<Activity> aList = weightDaoService.getActivityService().lastNMonths(defaultPerson,7);
    	Map<String,Float[]> tempMap = new HashMap<String, Float[]>();
    	String date = "";
    	
    	if (list.size() > 0) {
    		for (Weight w: list) {
    			date = shortDate.format(w.getWeightInDate());
    			Float[] values = tempMap.get(date);
    			if (values == null)
    				values = new Float[2];
    			
    			values[0] = Float.parseFloat(w.getValue());
    			tempMap.put(date, values);
    		}
    		for (Activity a : aList) {
    			date = shortDate.format(a.getActivityDate());
    			Float[] values = tempMap.get(date);
    			if (values == null)
    				values = new Float[2];
    			values[1] = Float.parseFloat(a.getValue())  ;
    			tempMap.put(date, values);
    		}
        	//return c3;
    	} else {
    		//log.debug("Start Date: " + startDate);
    		//log.debug("End Date: " + endDate);
    		//return null;
    	}
    	
    	// tempMap to C3 List
    	List<Float> ints = new ArrayList<Float>();
		List<String> dates = new ArrayList<String>();
		List<Float> activity = new ArrayList<Float>();
		C3 c3 = new C3();
    	for (String key : tempMap.keySet()) {
            		
       		dates.add(key);
           	ints.add(tempMap.get(key)[0]);
           	activity.add(tempMap.get(key)[1]);
            	
    	}
    	c3.setX(dates);
    	c3.setWeight(ints);
    	c3.setActivity(activity);
	
    	return c3;
    	
    }
    
    

    
    @RequestMapping(value = {"between/c3/{startDate}/{endDate}/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public C3 between(
    		@PathVariable(value="startDate")
    		@DateTimeFormat(pattern="yyyy-MM-dd") Date startDate,
    		@PathVariable(value="endDate")
    		@DateTimeFormat(pattern="yyyy-MM-dd") Date endDate
    		
    		) {
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	List<Weight> list = weightDaoService.getWeightService().between(defaultPerson,startDate, endDate);
    	C3 c3 = new C3();
    	if (list.size() > 0) {
    		List<Float> ints = new ArrayList<Float>();
    		List<String> dates = new ArrayList<String>();
        	for (Weight w: list) {
        		
        		dates.add(shortDate.format(w.getWeightInDate()));
            	ints.add(Float.parseFloat(w.getValue()));
            	
        	}
        	c3.setX(dates);
        	c3.setWeight(ints);
        	return c3;
    	} else {
    		log.debug("Start Date: " + startDate);
    		log.debug("End Date: " + endDate);
    		return null;
    	}
    	
    	
    	
    	
    }
    
    
    
    @RequestMapping(value = {"between/{startDate}/{endDate}/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<WeightView> betweenC3(
    		@PathVariable(value="startDate")
    		@DateTimeFormat(pattern="yyyy-MM-dd") Date startDate,
    		@PathVariable(value="endDate")
    		@DateTimeFormat(pattern="yyyy-MM-dd") Date endDate
    		
    		) {
    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	List<Weight> list = weightDaoService.getWeightService().between(defaultPerson,startDate, endDate);
    	if (list.size() > 0) {
    		List<WeightView> output = new ArrayList<WeightView>();
        	for (Weight w: list) {
        		WeightView wv = new WeightView();
            	wv.setDate(w.getWeightInDate());
            	wv.setValue(w.getValue());
            	output.add(wv);
        	}
        	return output;
    	} else {
    		log.debug("Start Date: " + startDate);
    		log.debug("End Date: " + endDate);
    		return null;
    	}
    	
    	
    	
    	
    }
    

    @RequestMapping(value = {"last/{count}/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<WeightView> lastN(
    		@PathVariable(value="count") String count
    		) {
    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	int i = 30;
    	try {
    		i = Integer.parseInt(count);
    	} catch (NumberFormatException nfe) {
    		i = 5;
    	}
    	
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	List<Weight> list = weightDaoService.getWeightService().latest(defaultPerson, i);
    	
    	List<WeightView> output = new ArrayList<WeightView>();
    	for (Weight w: list) {
    		WeightView wv = new WeightView();
        	wv.setDate(w.getWeightInDate());
        	wv.setValue(w.getValue());
        	output.add(wv);
    	}
    	
    	return output;
    	
    }

    
    @RequestMapping(value = {"last30/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<WeightView> last30() {
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);

    	//[ { "date": "2015-04-08 05:19:00", "value": "191.35" } ]
    	List<Weight> list = weightDaoService.getWeightService().latest(defaultPerson, 30);
    	
    	List<WeightView> output = new ArrayList<WeightView>();
    	for (Weight w: list) {
    		WeightView wv = new WeightView();
        	wv.setDate(w.getWeightInDate());
        	wv.setValue(w.getValue());
        	output.add(wv);
    	}
    	
    	return output;
    	
    }

	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = weightDaoService.getWeightService().count( options );
            List<Weight> weightList = weightDaoService.getWeightService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( Weight weight : weightList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					switch ( headerName ) {
						case "weightId" :
							tableRow.put( dataName, weight.getWeightId() );
							break;
						case "value" :
							tableRow.put( dataName, weight.getValue() );
							break;
						case "weightInDate" :
							tableRow.put( dataName, weight.getWeightInDate() );
							break;
						case "person" :
							if( weight.getPerson() != null ){
								tableRow.put( dataName, weight.getPerson().toString() );
							}
							break;
						case "urls" :
							String urls = "";
							if( StringUtils.equals( "list", display ) ){
								urls += "<a href=\"" + contextPath + "/weight/show?"+"weightId="+weight.getWeightId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
								urls += "<a href=\"" + contextPath + "/weight/edit?"+"weightId="+weight.getWeightId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
								urls += "<a href=\"" + contextPath + "/weight/delete?"+"weightId="+weight.getWeightId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
							} else {

							}
							tableRow.put( dataName, urls );
							break;
						default :
							tableRow.put( dataName, "[error: column " + headerName + " not supported]" );
							break;
					}
				}
				data.add( tableRow );
			}

			DataTable dataTable = new DataTable();
			dataTable.setDraw( dataTableRequest.getDraw() );
			dataTable.setRecordsFiltered( count );
			dataTable.setRecordsTotal( count );
			dataTable.setData( data );
			return dataTable;
			
		} catch ( Exception e ) {
			log.error( "error builing datatable json object for Weight", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "weight", new Weight() );
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );

        return "/weight/weight/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "weightId" ) Integer weightId ) {
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );


        model.addAttribute( "weight", weightDaoService.getWeightService().findById( weightId ) );
        return "/weight/weight/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "weightId" ) Integer weightId ) {

        model.addAttribute( "weight", weightDaoService.getWeightService().findById( weightId ) );
        return "/weight/weight/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "weight" ) Weight weight, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
					model.addAttribute( "personList", weightDaoService.getPersonService().list() );

			return "/weight/weight/edit"; 
		} else {
			try {
				weightDaoService.getWeightService().saveOrUpdate( weight );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				weightDaoService.getWeightService().merge( weight );
			}
		}
		return "redirect:/weight/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "weightId" ) Integer weightId ) {

        model.addAttribute( "weight", weightDaoService.getWeightService().findById( weightId ) );
        return "/weight/weight/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "weightId" ) Integer weightId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            weightDaoService.getWeightService().delete( weightDaoService.getWeightService().findById( weightId ) );
        }
        return "redirect:/weight/list";
    }
}