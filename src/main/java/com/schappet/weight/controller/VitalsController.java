package com.schappet.weight.controller;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.schappet.web.C3Vitals;
import com.schappet.weight.domain.SummaryVitals;
import com.schappet.weight.domain.Vitals;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/04/2016 15:29:02 CDT
 */
@Controller( value = "com_schappet_weight_controller_vitals_controller" )
@RequestMapping( "/vitals" )
public class VitalsController extends AbstractWeightController {

    private static final Log log = LogFactory.getLog( VitalsController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "vitalsList", weightDaoService.getVitalsService().list() );
        return "/weight/vitals/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list() {
        return "/weight/vitals/list";
    }
    
    
    

    private static final int DEFAULT_PERSON = 1;

    
    
    @RequestMapping(value = {"summary/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<SummaryVitals> summaryTable() {
    
    	List<SummaryVitals> list = weightDaoService.getSummaryVitalsService().latest(DEFAULT_PERSON, 50);
    	
    	
    	
    	return list;
    	
    }


    @RequestMapping(value = {"c3/last30/"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public C3Vitals last30C3()
    {
    	
    	List<Vitals> list = weightDaoService.getVitalsService().latest(DEFAULT_PERSON,30);
    	
    	Map<String,Integer[]> tempMap = new HashMap<String, Integer[]>();
    	String date = "";
    	
    	if (list.size() > 0) {
    		for (Vitals w: list) {
    			
    			date = shortDate.format(w.getVitalsDate());
    			
    			Integer[] values = tempMap.get(date);
    			if (values == null)
    				values = new Integer[3];
    			
    			values[0] = w.getDiatolic();
    			values[1] = w.getSystolic();
    			values[2] = w.getPulse();
    			
    			//log.debug("date: " + date + " values: " + values);
    			tempMap.put(date, values);
    		}
//    		for (Activity a : aList) {
//    			date = shortDate.format(a.getActivityDate());
//    			Float[] values = tempMap.get(date);
//    			if (values == null)
//    				values = new Float[2];
//    			values[1] = Float.parseFloat(a.getValue())  ;
//    			tempMap.put(date, values);
//    		}
        	//return c3;
    	} else {
    		//log.debug("Start Date: " + startDate);
    		//log.debug("End Date: " + endDate);
    		//return null;
    	}
    	
    	// tempMap to C3 List
    	List<String> dates = new ArrayList<String>();
    	List<Integer> diastolic = new ArrayList<Integer>();
		List<Integer> systolic = new ArrayList<Integer>();
		List<Integer> pulse = new ArrayList<Integer>();
		C3Vitals c3 = new C3Vitals();
    	for (String key : tempMap.keySet()) {
            		
       		dates.add(key);
           	diastolic.add(tempMap.get(key)[0]);
           	systolic.add(tempMap.get(key)[1]);
           	pulse.add(tempMap.get(key)[2]);
            	
    	}
    	c3.setX(dates);
    	c3.setDiastolic(diastolic);
    	c3.setSystolic(systolic);
    	c3.setPulse(pulse);
	
    	return c3;
    	
    }
    


	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = weightDaoService.getVitalsService().count( options );
            List<Vitals> vitalsList = weightDaoService.getVitalsService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( Vitals vitals : vitalsList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					switch ( headerName ) {
						case "vitalsId" :
							tableRow.put( dataName, vitals.getVitalsId() );
							break;
						case "vitalsDate" :
							tableRow.put( dataName, vitals.getVitalsDate() );
							break;
						case "systolic" :
							tableRow.put( dataName, vitals.getSystolic() );
							break;
						case "diatolic" :
							tableRow.put( dataName, vitals.getDiatolic() );
							break;
						case "pulse" :
							tableRow.put( dataName, vitals.getPulse() );
							break;
						case "comment" :
							tableRow.put( dataName, vitals.getComment() );
							break;
						case "person" :
							if( vitals.getPerson() != null ){
								tableRow.put( dataName, vitals.getPerson().toString() );
							}
							break;
						case "urls" :
							String urls = "";
							if( StringUtils.equals( "list", display ) ){
								urls += "<a href=\"" + contextPath + "/vitals/show?"+"vitalsId="+vitals.getVitalsId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
								urls += "<a href=\"" + contextPath + "/vitals/edit?"+"vitalsId="+vitals.getVitalsId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
								urls += "<a href=\"" + contextPath + "/vitals/delete?"+"vitalsId="+vitals.getVitalsId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
							} else {

							}
							tableRow.put( dataName, urls );
							break;
						default :
							tableRow.put( dataName, "[error: column " + headerName + " not supported]" );
							break;
					}
				}
				data.add( tableRow );
			}

			DataTable dataTable = new DataTable();
			dataTable.setDraw( dataTableRequest.getDraw() );
			dataTable.setRecordsFiltered( count );
			dataTable.setRecordsTotal( count );
			dataTable.setData( data );
			return dataTable;
			
		} catch ( Exception e ) {
			log.error( "error builing datatable json object for Vitals", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "vitals", new Vitals() );
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );

        return "/weight/vitals/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "vitalsId" ) Integer vitalsId ) {
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );


        model.addAttribute( "vitals", weightDaoService.getVitalsService().findById( vitalsId ) );
        return "/weight/vitals/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "vitalsId" ) Integer vitalsId ) {

        model.addAttribute( "vitals", weightDaoService.getVitalsService().findById( vitalsId ) );
        return "/weight/vitals/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "vitals" ) Vitals vitals, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
					model.addAttribute( "personList", weightDaoService.getPersonService().list() );

			return "/weight/vitals/edit"; 
		} else {
			try {
				weightDaoService.getVitalsService().saveOrUpdate( vitals );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				weightDaoService.getVitalsService().merge( vitals );
			}
		}
		return "redirect:/vitals/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "vitalsId" ) Integer vitalsId ) {

        model.addAttribute( "vitals", weightDaoService.getVitalsService().findById( vitalsId ) );
        return "/weight/vitals/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "vitalsId" ) Integer vitalsId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            weightDaoService.getVitalsService().delete( weightDaoService.getVitalsService().findById( vitalsId ) );
        }
        return "redirect:/vitals/list";
    }
}