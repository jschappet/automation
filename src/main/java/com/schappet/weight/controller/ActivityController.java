package com.schappet.weight.controller;



import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.NonUniqueObjectException;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import edu.uiowa.icts.datatable.DataTable;
import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import com.schappet.weight.domain.*;
import edu.uiowa.icts.spring.GenericDaoListOptions;

/**
 * Generated by Protogen 
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/02/2016 09:22:18 CDT
 */
@Controller( value = "com_schappet_weight_controller_activity_controller" )
@RequestMapping( "/activity" )
public class ActivityController extends AbstractWeightController {

	
	private static final int DEFAULT_PERSON = 1;

    private static final int BATCH_SIZE=200;

	private final SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd, yyyy 'at' KK:mma");
    private final SimpleDateFormat shortDate = new SimpleDateFormat("yyyy-MM-dd");
    private final SimpleDateFormat googleDocDate = new SimpleDateFormat("M/d/YYYY");


    private static final Log log = LogFactory.getLog( ActivityController.class );

    @RequestMapping( value = "list_alt", method = RequestMethod.GET )
    public String listNoScript(Model model) {
        model.addAttribute( "activityList", weightDaoService.getActivityService().list() );
        return "/weight/activity/list_alt";
    }

    @RequestMapping( value = { "list", "", "/" }, method = RequestMethod.GET )
    public String list(Model model) {
    	// needed for AngularJS grid/CRUD functionality
    			model.addAttribute( "personList", weightDaoService.getPersonService().list() );
 
        return "/weight/activity/list";
    }

    
    


    @RequestMapping(value = {"last/{number}/months"}, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public List<Activity> latestMonths(@PathVariable("number") Integer count) {
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);
    	
    	return weightDaoService.getActivityService().lastNMonths(defaultPerson, count);
    	
    }
    
    
    @RequestMapping(value = {"record/"}, method = RequestMethod.POST)
    @ResponseBody
    public String list(HttpServletRequest request,
    		@RequestParam(value="file", required=true) CommonsMultipartFile locationMapFileData
    		//,@RequestParam(value="data") String data
    		) {
    	//Map<String, String[]> names = request.getParameterMap();
    	InputStream in ;
    	String jsonStr;
    	Person defaultPerson = weightDaoService.getPersonService().findById(DEFAULT_PERSON);
		try {
			 in = locationMapFileData.getInputStream();
			jsonStr = IOUtils.toString(in, "UTF-8");
			//log.debug("contents: " + jsonStr);
    		String[] lines = jsonStr.split("\n");
    		List<Activity> batch = new ArrayList<Activity>();
    		for (String line : lines) {
        		
        		
        		try {
        			Activity a = new Activity(line, defaultPerson);
        			if (a != null) 
        				batch.add(a);
        			if (batch.size() > BATCH_SIZE)  {
        				weightDaoService.getActivityService().save(batch);
        				batch.clear();
        			}
        						
        		} catch (NumberFormatException nfe) {
        			log.debug("skip");
        		} catch (ArrayIndexOutOfBoundsException aio) {
        			log.debug("skip");
        		}
        		
    			
    		}
    		if (batch.size()> 0)
    			weightDaoService.getActivityService().save(batch);
        	
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("error parsing json", e);
		} 
        return "done";
    }




	@ResponseBody
	@RequestMapping( value = "datatable" , produces = "application/json" )
	public DataTable datatable( @RequestBody DataTableRequest dataTableRequest, HttpServletRequest request,
		@RequestParam( value = "display" , required = false , defaultValue = "list" ) String display ) {
		
		String contextPath = request.getContextPath();
		GenericDaoListOptions options = dataTableRequest.getGenericDaoListOptions();

		try {

			Integer count = weightDaoService.getActivityService().count( options );
            List<Activity> activityList = weightDaoService.getActivityService().list( options );
            
			List<LinkedHashMap<String, Object>> data = new ArrayList<LinkedHashMap<String, Object>>();

			for( Activity activity : activityList ){

				LinkedHashMap<String, Object> tableRow = new LinkedHashMap<String, Object>();

				for ( DataTableColumn column : dataTableRequest.getColumns() ) {

					String headerName = column.getName();
					String dataName = column.getData();

					switch ( headerName ) {
						case "activityId" :
							tableRow.put( dataName, activity.getActivityId() );
							break;
						case "value" :
							tableRow.put( dataName, activity.getValue() );
							break;
						case "activityDate" :
							tableRow.put( dataName, activity.getActivityDate() );
							break;
						case "person" :
							if( activity.getPerson() != null ){
								tableRow.put( dataName, activity.getPerson().toString() );
							}
							break;
						case "urls" :
							String urls = "";
							if( StringUtils.equals( "list", display ) ){
								urls += "<a href=\"" + contextPath + "/activity/show?"+"activityId="+activity.getActivityId()+"\"><span class=\"glyphicon glyphicon-eye-open\"></a>";
								urls += "<a href=\"" + contextPath + "/activity/edit?"+"activityId="+activity.getActivityId()+"\"><span class=\"glyphicon glyphicon-pencil\"></a>";
								urls += "<a href=\"" + contextPath + "/activity/delete?"+"activityId="+activity.getActivityId()+"\"><span class=\"glyphicon glyphicon-trash\"></a>";
							} else {

							}
							tableRow.put( dataName, urls );
							break;
						default :
							tableRow.put( dataName, "[error: column " + headerName + " not supported]" );
							break;
					}
				}
				data.add( tableRow );
			}

			DataTable dataTable = new DataTable();
			dataTable.setDraw( dataTableRequest.getDraw() );
			dataTable.setRecordsFiltered( count );
			dataTable.setRecordsTotal( count );
			dataTable.setData( data );
			return dataTable;
			
		} catch ( Exception e ) {
			log.error( "error builing datatable json object for Activity", e );
			return datatableError( e, dataTableRequest.getDraw() );
		}
		
	}

    @RequestMapping( value = "add", method = RequestMethod.GET )
    public String add( Model model ) {
        model.addAttribute( "activity", new Activity() );
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );

        return "/weight/activity/edit";
    }

    @RequestMapping( value = "edit", method = RequestMethod.GET )
    public String edit( ModelMap model, @RequestParam( value = "activityId" ) Integer activityId ) {
		model.addAttribute( "personList", weightDaoService.getPersonService().list() );


        model.addAttribute( "activity", weightDaoService.getActivityService().findById( activityId ) );
        return "/weight/activity/edit";
    }

    @RequestMapping( value = "show", method = RequestMethod.GET )
    public String show( ModelMap model, @RequestParam( value = "activityId" ) Integer activityId ) {

        model.addAttribute( "activity", weightDaoService.getActivityService().findById( activityId ) );
        return "/weight/activity/show";
    }

    @RequestMapping( value = "save", method = RequestMethod.POST )
    public String save(@Valid @ModelAttribute( "activity" ) Activity activity, BindingResult result, Model model ) {


		if (result.hasErrors()) { 
					model.addAttribute( "personList", weightDaoService.getPersonService().list() );

			return "/weight/activity/edit"; 
		} else {
			try {
				weightDaoService.getActivityService().saveOrUpdate( activity );
			} catch (NonUniqueObjectException e) {
				log.debug("Merging Results");
				weightDaoService.getActivityService().merge( activity );
			}
		}
		return "redirect:/activity/list";
    }

    @RequestMapping( value = "delete", method = RequestMethod.GET )
    public String confirmDelete( ModelMap model, @RequestParam( value = "activityId" ) Integer activityId ) {

        model.addAttribute( "activity", weightDaoService.getActivityService().findById( activityId ) );
        return "/weight/activity/delete";
    }

    @RequestMapping( value = "delete", method = RequestMethod.POST )
    public String doDelete( ModelMap model, @RequestParam( value = "submit" ) String submitButtonValue, @RequestParam( value = "activityId" ) Integer activityId ) {

        if ( StringUtils.equalsIgnoreCase( submitButtonValue, "yes" ) ) {
            weightDaoService.getActivityService().delete( weightDaoService.getActivityService().findById( activityId ) );
        }
        return "redirect:/activity/list";
    }
}