package com.schappet.weight.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.*;
import com.schappet.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/02/2016 08:30:22 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_person" )
@Table( name = "person", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Person { 

	private static final Log log = LogFactory.getLog( Person.class );

    private Integer personId;
    private String password;
    private String firstName;
    private String lastName;
    private String middleName;
    private Set<Activity> activitys = new HashSet<Activity>(0);
    private Set<Vitals> vitalss = new HashSet<Vitals>(0);
    private Set<Weight> weights = new HashSet<Weight>(0);
    private EmailAddress emailAddress;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "person_id", unique = true, nullable = false)
    public Integer getPersonId(){
        return personId;
    }

    public void setPersonId(Integer personId){
        this.personId = personId;
    }

    @JsonIgnore
    @Column(name = "password")
    public String getPassword(){
        return password;
    }

    public void setPassword(String password){
        this.password = password;
    }

    @Column(name = "first_name")
    public String getFirstName(){
        return firstName;
    }

    public void setFirstName(String firstName){
        this.firstName = firstName;
    }

    @Column(name = "last_name")
    public String getLastName(){
        return lastName;
    }

    public void setLastName(String lastName){
        this.lastName = lastName;
    }

    @Column(name = "middle_name")
    public String getMiddleName(){
        return middleName;
    }

    public void setMiddleName(String middleName){
        this.middleName = middleName;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY,   mappedBy = "person", targetEntity=Activity.class, cascade=CascadeType.REMOVE)
    public Set<Activity> getActivitys(){
        return activitys;
    }

    public void setActivitys(Set<Activity> activitys){
        this.activitys = activitys;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY,   mappedBy = "person", targetEntity=Vitals.class, cascade=CascadeType.REMOVE)
    public Set<Vitals> getVitalss(){
        return vitalss;
    }

    public void setVitalss(Set<Vitals> vitalss){
        this.vitalss = vitalss;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY,   mappedBy = "person", targetEntity=Weight.class, cascade=CascadeType.REMOVE)
    public Set<Weight> getWeights(){
        return weights;
    }

    public void setWeights(Set<Weight> weights){
        this.weights = weights;
    }

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=EmailAddress.class )
    @JoinColumn(name = "email_id",nullable = true)
    public EmailAddress getEmailAddress(){
        return emailAddress;
    }

    public void setEmailAddress(EmailAddress emailAddress){
        this.emailAddress = emailAddress;
    }

    @Transient
    public String getEmail() {
    	return emailAddress.getAddress();
    }

}
