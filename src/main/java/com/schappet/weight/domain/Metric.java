package com.schappet.weight.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.*;
import com.schappet.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 02/14/2016 12:33:31 PM CST
 */
@Entity( name = "com_schappet_weight_domain_metric" )
@Table( name = "metric", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Metric { 

	private static final Log log = LogFactory.getLog( Metric.class );

    private Integer metricId;
    private String name;
    private String textValue;
    private Double numericValue;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date dateAdded;
    private String source;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "metric_id", unique = true, nullable = false)
    public Integer getMetricId(){
        return metricId;
    }

    public void setMetricId(Integer metricId){
        this.metricId = metricId;
    }

    @Column(name = "name")
    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    @Column(name = "text_value")
    public String getTextValue(){
        return textValue;
    }

    public void setTextValue(String textValue){
        this.textValue = textValue;
    }

    @Column(name = "numeric_value")
    public Double getNumericValue(){
        return numericValue;
    }

    public void setNumericValue(Double numericValue){
        this.numericValue = numericValue;
    }

    @Column(name = "date_added")
    public Date getDateAdded(){
        return dateAdded;
    }

    @JsonSetter
    public void setDateAdded(Date dateAdded){
        this.dateAdded = dateAdded;
    }

    @JsonIgnore
    public void setDateAdded( String dateAdded ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.dateAdded = formatter.parse(dateAdded);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for DateAdded", e );
        }
    }

    @Column(name = "source")
    public String getSource(){
        return source;
    }

    public void setSource(String source){
        this.source = source;
    }


}
