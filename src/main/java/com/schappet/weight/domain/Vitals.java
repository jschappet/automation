package com.schappet.weight.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import com.schappet.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen - www.icts.uiowa.edu/protogen 
 * @since 04/11/2015 07:34:51 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_vitals" )
@Table( name = "vitals", schema = "weight" )
public class Vitals { 

	private static final Log log = LogFactory.getLog(Vitals.class);

        private Integer vitalsId;
        private Integer personId;
        @DateTimeFormat(pattern = "yyyy-MM-dd hh:mm")
    private Date vitalsDate;
        private Integer systolic;
        private Integer diatolic;
        private Integer pulse;
        private String comment;


    /*****vitalsId*****/
    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "vitals_id", unique = true, nullable = false)
    public Integer getVitalsId(){
        return vitalsId;
    }

    public void setVitalsId(Integer vitalsId){
        this.vitalsId = vitalsId;
    }

    /*****personId*****/
    @Column(name = "person_id")
    public Integer getPersonId(){
        return personId;
    }

    public void setPersonId(Integer personId){
        this.personId = personId;
    }

    /*****vitalsDate*****/
    @Column(name = "vitals_date")
    public Date getVitalsDate(){
        return vitalsDate;
    }

    public void setVitalsDate(Date vitalsDate){
        this.vitalsDate = vitalsDate;
    }

    public void setVitalsDate(String vitalsDate){
        try{
            DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            formatter.setLenient(true);
            this.vitalsDate = formatter.parse(vitalsDate);
        } catch (ParseException e) { 
        	try {
        		//"yyyy-MM-dd hh:mm"
        		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd hh:mm");
                formatter.setLenient(true);
                this.vitalsDate = formatter.parse(vitalsDate);
        	} catch (ParseException e1) {
        		log.error(" ParseException setting date for VitalsDate", e);
        	}
        	
            //log.error(" ParseException setting date for VitalsDate", e);
        }
    }

    /*****systolic*****/
    @Column(name = "systolic")
    public Integer getSystolic(){
        return systolic;
    }

    public void setSystolic(Integer systolic){
        this.systolic = systolic;
    }

    /*****diatolic*****/
    @Column(name = "diatolic")
    public Integer getDiatolic(){
        return diatolic;
    }

    public void setDiatolic(Integer diatolic){
        this.diatolic = diatolic;
    }

    /*****pulse*****/
    @Column(name = "pulse")
    public Integer getPulse(){
        return pulse;
    }

    public void setPulse(Integer pulse){
        this.pulse = pulse;
    }

    /*****comment*****/
    @Column(name = "comment")
    public String getComment(){
        return comment;
    }

    public void setComment(String comment){
        this.comment = comment;
    }


}
