package com.schappet.weight.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.*;
import com.schappet.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/02/2016 08:38:00 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_vitals" )
@Table( name = "vitals", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Vitals { 

	private static final Log log = LogFactory.getLog( Vitals.class );

    private Integer vitalsId;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date vitalsDate;
    private Integer systolic;
    private Integer diatolic;
    private Integer pulse;
    private String comment;
    private Person person;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "vitals_id", unique = true, nullable = false)
    public Integer getVitalsId(){
        return vitalsId;
    }

    public void setVitalsId(Integer vitalsId){
        this.vitalsId = vitalsId;
    }

    @Column(name = "vitals_date")
    public Date getVitalsDate(){
        return vitalsDate;
    }

    @JsonSetter
    public void setVitalsDate(Date vitalsDate){
        this.vitalsDate = vitalsDate;
    }

    @JsonIgnore
    public void setVitalsDate( String vitalsDate ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.vitalsDate = formatter.parse(vitalsDate);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for VitalsDate", e );
        }
    }

    @Column(name = "systolic")
    public Integer getSystolic(){
        return systolic;
    }

    public void setSystolic(Integer systolic){
        this.systolic = systolic;
    }

    @Column(name = "diatolic")
    public Integer getDiatolic(){
        return diatolic;
    }

    public void setDiatolic(Integer diatolic){
        this.diatolic = diatolic;
    }

    @Column(name = "pulse")
    public Integer getPulse(){
        return pulse;
    }

    public void setPulse(Integer pulse){
        this.pulse = pulse;
    }

    @Column(name = "comment")
    public String getComment(){
        return comment;
    }

    public void setComment(String comment){
        this.comment = comment;
    }

    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Person.class )
    @JoinColumn(name = "person_id",nullable = true)
    public Person getPerson(){
        return person;
    }

    public void setPerson(Person person){
        this.person = person;
    }


}
