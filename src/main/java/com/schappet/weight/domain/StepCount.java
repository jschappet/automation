package com.schappet.weight.domain;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.schappet.util.JsonDateDeserializer;
import com.schappet.util.JsonDateSerializer;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 06/08/2016 09:07:58 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_stepCount" )
@Table( name = "step_count", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class StepCount { 

	private static final Log log = LogFactory.getLog( StepCount.class );

    private Integer id;
    private String value;
    
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    @JsonSerialize(using=JsonDateSerializer.class)
    @JsonDeserialize(using=JsonDateDeserializer.class)
    private Date measureStartDate;
    
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    @JsonSerialize(using=JsonDateSerializer.class)
    @JsonDeserialize(using=JsonDateDeserializer.class)
    private Date measureEndDate;
    private Person person;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId(){
        return id;
    }

    public void setId(Integer id){
        this.id = id;
    }

    @Column(name = "value")
    public String getValue(){
        return value;
    }

    public void setValue(String value){
        this.value = value;
    }

    @Column(name = "measure_start_date")
    public Date getMeasureStartDate(){
        return measureStartDate;
    }

    @JsonSetter
    public void setMeasureStartDate(Date measureStartDate){
        this.measureStartDate = measureStartDate;
    }

    @JsonIgnore
    public void setMeasureStartDate( String measureStartDate ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.measureStartDate = formatter.parse(measureStartDate);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for MeasureStartDate", e );
        }
    }

    @Column(name = "measure_end_date")
    public Date getMeasureEndDate(){
        return measureEndDate;
    }

    @JsonSetter
    public void setMeasureEndDate(Date measureEndDate){
        this.measureEndDate = measureEndDate;
    }

    @JsonIgnore
    public void setMeasureEndDate( String measureEndDate ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.measureEndDate = formatter.parse(measureEndDate);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for MeasureEndDate", e );
        }
    }

    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Person.class )
    @JoinColumn(name = "person_id",nullable = true)
    public Person getPerson(){
        return person;
    }

    @JsonIgnore
    public void setPerson(Person person){
        this.person = person;
    }
    
    @Transient
    public String getPersonName() {
    	if (person != null ) {
    		return person.getFullName();
    	} else {
    		return "";
    	}
    }

}
