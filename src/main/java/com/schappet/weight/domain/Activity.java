package com.schappet.weight.domain;

import java.util.Set;
import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Table;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import org.springframework.format.annotation.DateTimeFormat;
import org.hibernate.annotations.*;
import javax.persistence.CascadeType;
import javax.validation.constraints.NotNull;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.schappet.*;
import com.schappet.util.JsonDateSerializer;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/02/2016 08:32:29 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_activity" )
@Table( name = "activity", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Activity { 

    public Activity() {
    	
    }
    
    

	public Activity(String csv, Person person)  {
		
    	String[] parts = csv.split(",");
    	try  {
	    	String date[] = parts[0].split("/");
	    	int month = Integer.parseInt(date[0]);
	    	int day = Integer.parseInt(date[1]);
	    	int year = Integer.parseInt(date[2]);
	    	
	    	Calendar calendar = new GregorianCalendar(year,month -1 ,day);
	    	
	    	this.activityDate = calendar.getTime();
    	} catch (NumberFormatException nfe) {
    		throw new NumberFormatException();
    	}
    	this.person=person;
    	try {
    		this.value = parts[4];	
    	} catch( ArrayIndexOutOfBoundsException aioobe) {
    		throw new ArrayIndexOutOfBoundsException();
    	}
        
    	
    }

    
    @Override
	public String toString() {
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

		return "Activity [activityId=" + activityId + ", person=" + person.getLastName() 
				+ ", value=" + value + ", activityDate=" + formatter.format(activityDate) + "]";
	}
	
	
	private static final Log log = LogFactory.getLog( Activity.class );

    private Integer activityId;
    private String value;
    
    @JsonSerialize(using=JsonDateSerializer.class)
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    private Date activityDate;
    private Person person;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "activity_id", unique = true, nullable = false)
    public Integer getActivityId(){
        return activityId;
    }

    public void setActivityId(Integer activityId){
        this.activityId = activityId;
    }

    @Column(name = "value")
    public String getValue(){
        return value;
    }

    public void setValue(String value){
        this.value = value;
    }

    @Column(name = "activity_date")
    public Date getActivityDate(){
        return activityDate;
    }

    @JsonSetter
    public void setActivityDate(Date activityDate){
        this.activityDate = activityDate;
    }

    @JsonIgnore
    public void setActivityDate( String activityDate ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.activityDate = formatter.parse(activityDate);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for ActivityDate", e );
        }
    }

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Person.class )
    @JoinColumn(name = "person_id",nullable = true)
    public Person getPerson(){
        return person;
    }

    public void setPerson(Person person){
        this.person = person;
    }

    @Transient
    public String getPersonName() {
    	return this.person.getLastName() + ", " + this.person.getFirstName();
    }

}
