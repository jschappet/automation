package com.schappet.weight.domain;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.schappet.util.JsonDateSerializer;

/** 
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since 04/02/2016 08:38:54 AM CDT
 */
@Entity( name = "com_schappet_weight_domain_weight" )
@Table( name = "weight", schema = "weight" )
@JsonIgnoreProperties( { "hibernateLazyInitializer", "handler" } )
public class Weight { 

	private static final Log log = LogFactory.getLog( Weight.class );

    private Integer weightId;
    private String value;
    @DateTimeFormat( pattern = "yyyy-MM-dd" )
    @JsonSerialize(using=JsonDateSerializer.class)
    private Date weightInDate;
    private Person person;


    @javax.persistence.SequenceGenerator(  name="gen",  sequenceName="weight.seqnum",allocationSize=1)
    @Id
    @GeneratedValue( strategy=GenerationType.AUTO,generator="gen")
    @Column(name = "weight_id", unique = true, nullable = false)
    public Integer getWeightId(){
        return weightId;
    }

    public void setWeightId(Integer weightId){
        this.weightId = weightId;
    }

    @Column(name = "value")
    public String getValue(){
        return value;
    }

    public void setValue(String value){
        this.value = value;
    }

    @Column(name = "weight_in_date")
    public Date getWeightInDate(){
        return weightInDate;
    }

    @JsonSetter
    public void setWeightInDate(Date weightInDate){
        this.weightInDate = weightInDate;
    }

    @JsonIgnore
    public void setWeightInDate( String weightInDate ){
        try{
            DateFormat formatter = new SimpleDateFormat( "MM/dd/yyyy" );
            formatter.setLenient(true);
            this.weightInDate = formatter.parse(weightInDate);
        } catch ( ParseException e ) { 
            log.error( "ParseException setting date for WeightInDate", e );
        }
    }

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY,  targetEntity=Person.class )
    @JoinColumn(name = "person_id",nullable = true)
    public Person getPerson(){
        return person;
    }

    public void setPerson(Person person){
        this.person = person;
    }

    
    @Transient
    public Float getValueFloat(){
    	try {
    		return Float.parseFloat(value);
    	} catch (NumberFormatException nfe) {
    		return 0f;
    	}
        		
    }
    
    @Transient
    public String getPersonName() {
    	return person.getFullName();
    }

}
