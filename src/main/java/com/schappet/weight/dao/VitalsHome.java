package com.schappet.weight.dao;

import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.schappet.spring.GenericDao;
import com.schappet.weight.domain.Activity;
import com.schappet.weight.domain.Vitals;
import com.schappet.weight.domain.Weight;

/**
 * Generated by Protogen 
 * @since 04/11/2015 07:34:51 CDT
 */
@Repository("com_schappet_weight_dao_VitalsHome")
@Transactional
public class VitalsHome extends GenericDao<Vitals> implements VitalsService {

	private static final Log log = LogFactory.getLog( VitalsHome.class );

	public VitalsHome() {
		setDomainName( "com.schappet.weight.domain.Vitals" );
	}

	public Vitals findById( Integer id ) {
		return (Vitals) this.sessionFactory.getCurrentSession().get( Vitals.class, id );
	}

	
	public Vitals findByPersonIdAndDate( Integer id , Date date) {
		//vitalsDate
		     Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Vitals.class);
		     criteria.add(Restrictions.eq("personId", id));
		     criteria.add(Restrictions.eq("vitalsDate", date));
		     //criteria.addOrder(Order.desc("activityDate"));
		     criteria.setMaxResults(1);
		     return (Vitals)criteria.uniqueResult();

		
	}

	@Override
	public List<Vitals> latest(int personId, int count) {
	
	     Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Vitals.class);
	     criteria.add(Restrictions.eq("personId", personId));
	     criteria.addOrder(Order.desc("vitalsDate"));
	     criteria.setMaxResults(count < 50 ? count : 50);
	     return criteria.list();
	     
		
	}
}