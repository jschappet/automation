package com.schappet.weight.dao;

import java.util.Calendar;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.schappet.spring.GenericDao;
import com.schappet.weight.domain.Activity;

/**
 * Generated by Protogen 
 * @since 04/11/2015 07:34:51 CDT
 */
@Repository("com_schappet_weight_dao_ActivityHome")
@Transactional
public class ActivityHome extends GenericDao<Activity> implements ActivityService {

	private static final Log log = LogFactory.getLog( ActivityHome.class );

	public ActivityHome() {
		setDomainName( "com.schappet.weight.domain.Activity" );
	}

	public Activity findById( Integer id ) {
		return (Activity) this.sessionFactory.getCurrentSession().get( Activity.class, id );
	}

	public List<Activity> latest(int defaultPerson, int count) {
	     Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Activity.class);
	     criteria.add(Restrictions.eq("personId", defaultPerson));
	     criteria.addOrder(Order.desc("activityDate"));
	     criteria.setMaxResults(count < 50 ? count : 50);
	     return criteria.list();
	}

	
	
	@Override
	public List<Activity> lastNMonths(int personId, int count) {
		
		Disjunction or = Restrictions.disjunction();
		
	    Criteria criteria = this.sessionFactory.getCurrentSession().createCriteria(Activity.class);
	    criteria.add(Restrictions.eq("personId", personId));
	    
		Calendar calendar1 = Calendar.getInstance(); // this would default to now
		calendar1.add(Calendar.DAY_OF_MONTH, -( 3 )) ;
	
		Conjunction and1 = Restrictions.conjunction();	
		and1.add(Restrictions.ge("activityDate", calendar1.getTime()));
		calendar1.add(Calendar.DAY_OF_MONTH, 3);
		and1.add(Restrictions.le("activityDate", calendar1.getTime()));
		or.add(and1);
	    
	    
	    for (int i = 0 ; i <= count ; i++) {

	    	
			Calendar calendar = Calendar.getInstance(); // this would default to now
			calendar.add(Calendar.DAY_OF_MONTH, -( i * 30 )) ;
		
			Conjunction and = Restrictions.conjunction();	
			and.add(Restrictions.ge("activityDate", calendar.getTime()));
			calendar.add(Calendar.DAY_OF_MONTH, 1);
			and.add(Restrictions.le("activityDate", calendar.getTime()));
			
	    	or.add(and);
		}
		
	    criteria.add(or);
	     
	    criteria.setMaxResults(count < 12 ? count : 12);
	    return criteria.list();
		 
	}
	
}