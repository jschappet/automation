package com.schappet.weight.controller;


import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.schappet.weight.dao.*;
import com.schappet.weight.domain.*;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Generated by Protogen
 * @since Sat Apr 11 07:34:51 CDT 2015
 */
@RunWith(SpringJUnit4ClassRunner.class)
public class ActivityControllerMvcTest extends AbstractControllerMVCTests {
	
    private MockMvc mockMvc;
    
    @Autowired
	private WeightDaoService weightDaoService;
    
    private Activity firstActivity;
    
    @Before
    public void setup() {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();

              // add 20 records to test database
        for(int x=1; x<21; x++){
        	Activity activity = new Activity();
        	weightDaoService.getActivityService().save(activity);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstActivity = activity;
	        }
        }   
          }

    @Test
    public void addShouldDisplayNewActivityForm() throws Exception {
       mockMvc.perform(get("/activity/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("activity")) 
       .andExpect(view().name("/weight/activity/edit"));
    }
    
    @Test
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/activity/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/weight/activity/list"));
    }
    
    @Test
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/activity/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/weight/activity/list"));
    }
    
    @Test
    public void listAltShouldLoadListOfActivitys() throws Exception {
       mockMvc.perform(get("/activity/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("activityList")) 
       .andExpect(view().name("/weight/activity/list_alt"));
    }
    
    
       /*   	  
    @Test
    public void saveShouldPersistAndRedirectToListView() throws Exception {
       int count = weightDaoService.getActivityService().list().size();
       
       mockMvc.perform(post("/activity/save")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/activity/list"));   
       
       assertEquals("Activity count should increase by 1", count +1 , weightDaoService.getActivityService().list().size());
	}
  */
    @Test
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/activity/edit").param("activityId", firstActivity.getActivityId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("activity")) 
         .andExpect(view().name("/weight/activity/edit"));
    }
    
    @Test
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("/activity/show").param("activityId", firstActivity.getActivityId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("activity")) 
         .andExpect(view().name("/weight/activity/show"));
    }
    
    @Test
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/activity/delete").param("activityId", firstActivity.getActivityId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("activity")) 
         .andExpect(view().name("/weight/activity/delete"));
    }
    
    @Test
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        int count = weightDaoService.getActivityService().list().size();

       mockMvc.perform(post("/activity/delete").param("activityId", firstActivity.getActivityId().toString())
       .param("submit", "Yes")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/activity/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , weightDaoService.getActivityService().list().size());
    }
    
    @Test
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        int count = weightDaoService.getActivityService().list().size();

       mockMvc.perform(post("/activity/delete").param("activityId", firstActivity.getActivityId().toString())
       .param("submit", "No")).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/activity/list"));  
       
       assertEquals("count should NOT decrease by 1", count , weightDaoService.getActivityService().list().size());
    }
      
    @Test
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	mockMvc.perform(get("/activity/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "0")
			.param("columnCount", "3")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","urls").param("columns[0][searchable]","false").param("columns[0][orderable]","false").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
						.param("columns[1][data]","1").param("columns[1][name]","activityDate").param("columns[1][searchable]","true").param("columns[1][orderable]","true").param("columns[1][search][regex]","false").param("columns[1][search][value]","")
						.param("columns[2][data]","2").param("columns[2][name]","personId").param("columns[2][searchable]","true").param("columns[2][orderable]","true").param("columns[2][search][regex]","false").param("columns[2][search][value]","")
						.param("columns[3][data]","3").param("columns[3][name]","value").param("columns[3][searchable]","true").param("columns[3][orderable]","true").param("columns[3][search][regex]","false").param("columns[3][search][value]","")
						.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(weightDaoService.getActivityService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(weightDaoService.getActivityService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("delete?")))
        ;
    }
    	  
    @Test
    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	mockMvc.perform(get("/activity/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("columns[0][data]","0").param("columns[0][name]","asdfasdf").param("columns[0][searchable]","true").param("columns[0][orderable]","true").param("columns[0][search][regex]","false").param("columns[0][search][value]","")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(weightDaoService.getActivityService().list().size())))
    	.andExpect(jsonPath("$.recordsFiltered", is(weightDaoService.getActivityService().list().size())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    @Test
    public void defaultDatatableShouldReturnException() throws Exception {
    	mockMvc.perform(get("/activity/datatable")
			.param("display", "list")
			.param("search[value]", "")
			.param("search[regex]", "false")
			.param("length", "10")
			.param("start", "1")
			.param("columnCount", "1")
			.param("draw", "1")
			.param("individualSearch", "true")
			.param("order[0][column]","1").param(".order[0][dir]", "asc")
			.accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", IsNull.nullValue()))
    //	.andExpect(jsonPath("$.error", is("")))
    	;
    }      
          
    
}